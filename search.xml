<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据流中的第K大元素</title>
      <link href="/2021/02/26/shu-ju-liu-zhong-de-di-k-da-yuan-su/"/>
      <url>/2021/02/26/shu-ju-liu-zhong-de-di-k-da-yuan-su/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>设计一个找到数据流中第 k 大元素的类（class）。注意是排序后的第 k 大元素，不是第 k 个不同的元素。</p><p>请实现 KthLargest 类：<br>KthLargest(int k, int[] nums) 使用整数 k 和整数流 nums 初始化对象。<br>int add(int val) 将 val 插入数据流 nums 后，返回当前数据流中第 k 大的元素。</p><p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/" target="_blank" rel="noopener">leetcode传送门</a></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li><p>这个题的解题思路有很多，题目要求我们初始化一个类来保存数组，而在每次<code>add()</code>的过程中，返回数组中的第<code>K</code>大元素，我们可以使用 <strong>小根堆</strong>，<strong>multiset</strong>，multiset会自动排序，而且允许数据重复</p></li><li><p>这个题用的是小根堆的方法来做</p></li></ul><h4 id="MyCode"><a href="#MyCode" class="headerlink" title="MyCode"></a>MyCode</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">KthLargest</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">KthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> target<span class="token punctuation">)</span>                heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>               heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> target<span class="token punctuation">)</span>            heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token operator">:</span>    <span class="token comment" spellcheck="true">//小根堆，依次分别是&lt;类型,&lt;存储方式>,&lt;比较函数>></span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> heap<span class="token punctuation">;</span>    <span class="token keyword">int</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your KthLargest object will be instantiated and called as such: * KthLargest* obj = new KthLargest(k, nums); * int param_1 = obj->add(val); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对小根堆的简单理解"><a href="#对小根堆的简单理解" class="headerlink" title="对小根堆的简单理解"></a>对小根堆的简单理解</h3><ul><li><p>小根堆就是父节点比每个子节点的数都小（当然，也是有大根堆的，大根堆就是父节点的值比每个子节点的值都大）</p></li><li><p>最小堆的定义 <strong>priority_queue&lt;int, vector<int>, greater<int>&gt; heap;</int></int></strong>，每个位置的意思是 <strong>依次分别是&lt;类型,&lt;存储方式&gt;,&lt;比较函数&gt;&gt;</strong></p></li><li><p>但是小根堆好像只支持<code>int</code></p></li></ul><h3 id="为什么用小根堆"><a href="#为什么用小根堆" class="headerlink" title="为什么用小根堆"></a>为什么用小根堆</h3><ul><li>因为我们需要在堆中保留数据流中的前 KK 大元素，使用小根堆能保证每次调用堆的 pop() 函数时，从堆中删除的是堆中的最小的元素（堆顶）</li></ul><h3 id="为什么能保证堆顶元素是第-KK-大元素？"><a href="#为什么能保证堆顶元素是第-KK-大元素？" class="headerlink" title="为什么能保证堆顶元素是第 KK 大元素？"></a>为什么能保证堆顶元素是第 KK 大元素？</h3><ul><li>因为小根堆中保留的一直是堆中的前 KK 大的元素，堆的大小是 KK，所以堆顶元素是第 KK 大元素。</li></ul><h3 id="每次-add-的时间复杂度是多少？"><a href="#每次-add-的时间复杂度是多少？" class="headerlink" title="每次 add() 的时间复杂度是多少？"></a>每次 add() 的时间复杂度是多少？</h3><ul><li>每次 add() 时，调用了堆的 push() 和 pop() 方法，两个操作的时间复杂度都是 log(K)log(K).</li></ul>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 做题经验get </category>
          
          <category> 小根堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>棒球比赛</title>
      <link href="/2021/02/24/bang-qiu-bi-sai/"/>
      <url>/2021/02/24/bang-qiu-bi-sai/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p><p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：</p><p>整数 x - 表示本回合新获得分数 x<br>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。<br>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>请你返回记录中所有得分的总和。</p><p><a href="https://leetcode-cn.com/problems/baseball-game" target="_blank" rel="noopener">leetecode传送们</a></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>其实看到这个题很简单，相当于按照条件来进行运算，对不同的情况，进行处理就好了</li></ul><h4 id="MyCode"><a href="#MyCode" class="headerlink" title="MyCode"></a>MyCode</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">calPoints</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> ops<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string c <span class="token operator">:</span> ops<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"D"</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> ans<span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把数字字符串转换为int型</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>            res <span class="token operator">+</span><span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ul><li>这个题我主要是来记录一下对数字字符串转换为<code>int</code>的数字，因为这个题是<code>string</code>类型的，所以不能做 <strong>“5” - “0”</strong> 这样的操作，如果是<code>char</code>类型，这样的操作是可以的</li><li>所以在这个题中，我用的是<code>stoi</code>这个函数，其实还有一个<code>atoi</code>也可以用，但是它们两个有区别</li></ul><h4 id="stoi和atoi的区别"><a href="#stoi和atoi的区别" class="headerlink" title="stoi和atoi的区别"></a>stoi和atoi的区别</h4><h5 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h5><ul><li><p>①都是C++的字符处理函数，把数字字符串转换成int输出</p></li><li><p>②头文件都是<code>#include&lt;cstring&gt;</code></p></li></ul><h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><ul><li><p>①<code>atoi()</code>的参数是 <code>const char*</code> ,因此对于一个字符串<code>str</code>我们必须调用 <code>c_str(</code>)的方法把这个<code>string</code>转换成 <code>const char*</code>类型的,而<code>stoi()</code>的参数是<code>const string*</code>,不需要转化为 <code>const char*</code>；</p></li><li><p>②<code>stoi()</code>会做范围检查，默认范围是在<code>int</code>的范围内的，如果超出范围的话则会<code>runtime error！</code>而<code>atoi()</code>不会做范围检查，如果超出范围的话，超出上界，则输出上界，超出下界，则输出下界</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>这样看还是用<code>stoi</code>好一点</li></ul>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 做题经验get </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>if()语句的奇怪写法</title>
      <link href="/2021/02/16/if-yu-ju-de-qi-guai-xie-fa/"/>
      <url>/2021/02/16/if-yu-ju-de-qi-guai-xie-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>晚上的时候，看到群里有个人问<code>if(9 &lt; a &lt; 10)</code>这样写为什么会出错，我看了一下，发现我写了那么久的代码，好像没有见过这么写，觉得这跑起来应该会报错，就在<code>leetecode</code>上的<code>PlayGround</code>上简单写了一下，然后跑一下</li></ul><h3 id="测试问题"><a href="#测试问题" class="headerlink" title="测试问题"></a>测试问题</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> a <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"AC"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我发现这个竟然可以跑起来，对，你没看错，可以跑起来，编译器没有报错，结果也是正确的，但我在测试其他案例的时候（好的测试案例都是正确和错误都要测试的），发现了一个有趣的问题</li></ul><h3 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h3><ul><li>当我无论是把<code>a</code>变成最小值和最大值，这个程序输出的值都是<code>AC</code>，怎么样，奇怪吧，我就感觉很疑惑</li></ul><h4 id="取最小值"><a href="#取最小值" class="headerlink" title="取最小值"></a>取最小值</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"AC"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="取最大值"><a href="#取最大值" class="headerlink" title="取最大值"></a>取最大值</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"AC"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最终的结果都是输出<code>AC</code></li></ul><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>原来是因为<code>9 &lt; a &lt; 11</code> 这个语句会先判断前半部分 <code>9 &lt; a</code>，它的结果是一个 <code>bool</code> 型的结果，之后再和 11 进行比较（比较的时候会先把之前的结果隐式转换成 int 型）。由于 bool 型转换成int 型的结果只有 1 和 0，所以一定小于 11，整个条件永远为真,也就是说，无论<code>a</code>取什么值，最后的结果都会是<code>true</code></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 有趣的逻辑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尽可能使字符串相等</title>
      <link href="/2021/02/05/jin-ke-neng-shi-zi-fu-chuan-xiang-deng/"/>
      <url>/2021/02/05/jin-ke-neng-shi-zi-fu-chuan-xiang-deng/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>给你两个长度相同的字符串，s 和 t。将 s 中的第 i 个字符变到 t 中的第 i 个字符需要 |s[i] - t[i]| 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。用于变更字符串的最大预算是 maxCost。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。如果你可以将 s 的子字符串转化为它在 t 中对应的子字符串，则返回可以转化的最大长度。如果 s 中没有子字符串可以转化成 t 中对应的子字符串，则返回 0。<br><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/" target="_blank" rel="noopener">leetcode传送门</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li>这个题其实比较奇特，如果按照题目意思来做，那就可能就会走暴力路（我只能想到暴力了）</li><li>但要是换一个看法，如果我们使用一个<code>cost[i]</code>来记录<code>s[i]</code>转化为<code>t[i]</code>的开销</li><li>这样题目就变成了有一个<code>cost[i]</code>数组，我们去求和不超过<code>maxCost</code>的最长的子数组的长度</li><li>这样就很容易就会想到这类题要使用滑动窗口来做</li></ul><h3 id="滑动窗口模板"><a href="#滑动窗口模板" class="headerlink" title="滑动窗口模板"></a>滑动窗口模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp">def <span class="token function">findSubArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">:</span>    N <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> # 数组<span class="token operator">/</span>字符串长度    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> # 双指针，表示当前遍历的区间<span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span>，闭区间    sums <span class="token operator">=</span> <span class="token number">0</span> # 用于统计 子数组<span class="token operator">/</span>子区间 是否有效，根据题目可能会改成求和<span class="token operator">/</span>计数    res <span class="token operator">=</span> <span class="token number">0</span> # 保存最大的满足题目要求的 子数组<span class="token operator">/</span>子串 长度    <span class="token keyword">while</span> right <span class="token operator">&lt;</span> N<span class="token operator">:</span> # 当右边的指针没有搜索到 数组<span class="token operator">/</span>字符串 的结尾        sums <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> # 增加当前右边指针的数字<span class="token operator">/</span>字符的求和<span class="token operator">/</span>计数        <span class="token keyword">while</span> 区间<span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span>不符合题意：# 此时需要一直移动左指针，直至找到一个符合题意的区间            sums <span class="token operator">-</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> # 移动左指针前需要从counter中减少left位置字符的求和<span class="token operator">/</span>计数            left <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> # 真正的移动左指针，注意不能跟上面一行代码写反        # 到 <span class="token keyword">while</span> 结束时，我们找到了一个符合题意要求的 子数组<span class="token operator">/</span>子串        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> # 需要更新结果        right <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> # 移动右指针，去探索新的区间    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板分析"><a href="#模板分析" class="headerlink" title="模板分析"></a>模板分析</h3><p>滑动窗口中用到了左右两个指针，它们移动的思路是：以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。</p><p>模板的整体思想是：</p><p>定义两个指针 left 和 right 分别指向区间的开头和结尾，注意是闭区间；定义 sums 用来统计该区间内的各个字符出现次数；<br>第一重 while 循环是为了判断 right 指针的位置是否超出了数组边界；当 right 每次到了新位置，需要增加 right 指针的求和/计数；<br>第二重 while 循环是让 left 指针向右移动到 [left, right] 区间符合题意的位置；当 left 每次移动到了新位置，需要减少 left 指针的求和/计数；<br>在第二重 while 循环之后，成功找到了一个符合题意的 [left, right] 区间，题目要求最大的区间长度，因此更新 res 为 max(res, 当前区间的长度) 。<br>right 指针每次向右移动一步，开始探索新的区间。<br>模板中的 sums 需要根据题目意思具体去修改，本题是求和题目因此把sums 定义成整数用于求和；如果是计数题目，就需要改成字典用于计数。当左右指针发生变化的时候，都需要更新 sums 。</p><p>另外一个需要根据题目去修改的是内层 while 循环的判断条件，即： 区间[left, right]不符合题意 。对于本题而言，就是该区内的和 sums 超过了 maxCost 。</p><h3 id="题解思路来源"><a href="#题解思路来源" class="headerlink" title="题解思路来源"></a>题解思路来源</h3><p><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/fen-xiang-zhen-cang-de-hua-dong-chuang-k-e3rd/" target="_blank" rel="noopener">传送们</a></p><h3 id="Mycode"><a href="#Mycode" class="headerlink" title="Mycode"></a>Mycode</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">equalSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">,</span> <span class="token keyword">int</span> maxCost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录最终的结果</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录转换消耗的总和</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左右指针</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cost</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存两个字符串变换需要的消耗</span>        <span class="token comment" spellcheck="true">//记录两个字符串的消耗</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>             cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//滑动窗口</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> cost<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存交换的消耗</span>            <span class="token comment" spellcheck="true">//当消耗超过预设值</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> maxCost<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//收缩窗口</span>                sum <span class="token operator">-</span><span class="token operator">=</span> cost<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                left <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//更新最长的字符串</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            right <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>这个还是在两次循环中，但是<code>left</code>循环几乎不怎么动，或者动的很小，所以理论上时间复杂度也不会太高，但在跑数据的时候还是不理想，时间复杂度波动还是很大</li></ul>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 做题经验get </category>
          
          <category> 解题模板 </category>
          
          <category> 滑动窗口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口中位数</title>
      <link href="/2021/02/02/hua-dong-chuang-kou-zhong-wei-shu/"/>
      <url>/2021/02/02/hua-dong-chuang-kou-zhong-wei-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>中位数是有序序列最中间的那个数。如果序列的长度是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。</p><p>例如：</p><p>[2,3,4]，中位数是 3<br>[2,3]，中位数是 (2 + 3) / 2 = 2.5<br>给你一个数组 nums，有一个长度为 k 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口向右移动 1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。</p><p><a href="https://leetcode-cn.com/problems/sliding-window-median/" target="_blank" rel="noopener">leetcode传送们</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>最开始的时候，看这个题感觉是简单的，我就想用双指针来维持窗口，在对窗口中的数字进行排序</li><li>排完序后就可以根据窗口的<code>k</code>值是奇数还是偶数来查找中位数</li><li>但是跑完发现超时了，还剩10个测试用例</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">Mid</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> temp <span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">medianSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> k <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Mid</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            left <span class="token operator">++</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> left <span class="token operator">+</span> k <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>于是我就改了一下原来的代码</li><li>把它改成边滑动，边往数组中存值，当有<code>k</code>个值后，再找窗户中的中位数</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">Mid</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> ans<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">medianSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> res<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> k <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> left <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Mid</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">++</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                right <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但结果还是超时了</li><li>后来看了一下题解，原来是 <strong>sort()</strong>的问题，要是对窗口进行排序的话，一定会是超时的，为了降低时间复杂度，只能增加空间复杂度了，所以只能换一个数据结构了</li></ul><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><ul><li>在 C++ 中 set/multiset 是有序的集合，它们是基于红黑树实现的。其中 set 会对元素去重，而 multiset 可以有重复元素</li><li>在 Java 中 TreeSet 是有序的集合，它也是基于红黑树实现的。 TreeSet 会对元素去重</li><li>在 Python 中 heapq  实现了堆的算法，它不会对元素去重。</li><li>当频繁的插入和删除元素时，这些有序的数据结构能够在在 <strong>O(log(k))</strong>  的时间复杂度内维护结构的有序性。但是对于红黑树实现的数据结构来说，不能做随机读取，因此获取中位数的时候，也只能通过 <strong>O(k)</strong> 时间复杂度的查找。</li></ul><h3 id="改进的思路"><a href="#改进的思路" class="headerlink" title="改进的思路"></a>改进的思路</h3><ul><li>定义出<code>res</code>和<code>multiset</code>，分别记录最后的结果和维持窗口的有序</li><li>对<code>nums</code>进行遍历，并将数存入<code>mulitset</code>中（会维持有序性）</li><li>如果<code>multiset</code>中的个数大于<code>k</code>，说明超过了窗口大小，此时要移除窗口的最左边的数</li><li>插入新数字（依旧会维持有序性）</li><li>如果当前的位置到达了<code>k - 1</code>，说明此时已经有<code>k</code>个数了，此时查找中位数，存入<code>res</code></li></ul><h3 id="MyCode"><a href="#MyCode" class="headerlink" title="MyCode"></a>MyCode</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">medianSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录最终的结果</span>        multiset<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> stl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//利用数组构建一个multiset</span>        <span class="token comment" spellcheck="true">//对nums数组进行遍历，并维持multiset</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前长度超过k，那么就移除窗口的最左边的数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stl<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span> stl<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>stl<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//否则就插入这个元素</span>            stl<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果到达了下标 k - 1，说明窗口中有k个元素，此时开始求中位数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">auto</span> mid <span class="token operator">=</span> stl<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                std <span class="token operator">::</span> <span class="token function">advance</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>mid <span class="token operator">+</span> <span class="token operator">*</span><span class="token function">prev</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> k <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对代码的一些说明"><a href="#对代码的一些说明" class="headerlink" title="对代码的一些说明"></a>对代码的一些说明</h3><ul><li>如果是在<code>erase()</code>中直接写值的话，会删除所有的值</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ms</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 利用数组构造multiset，包含{10,10,20,20,20,30,50}</span>ms<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 值删除，这样将删除所有的20</span><span class="token function">assert</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// multiset中没有20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代器删除，只删除一个</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ms</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 利用数组构造multiset，包含{10,10,20,20,20,30,50}</span>ms<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 迭代器删除，这样将删除找到的第一个20</span><span class="token function">assert</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// multiset中还有两个20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>auto mid = stl.begin();</code> <strong>-&gt;</strong> 可以根据后一个变量的类型自动推导 auto 后面变量的类型</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">auto</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>multiset&lt;int&gt;::iterator it</code> <strong>-&gt;</strong> 定义正向迭代器</p></li><li><p><code>multiset&lt;int&gt;::reverse_iterator rit;</code> <strong>-&gt;</strong> 定义反向迭代器</p></li><li><p><code>auto it = t.begin();</code> <strong>-&gt;</strong> 因为t.begin()返回正向迭代器，所以it自动被定义为正向迭代器，可适应其他所有操作</p></li><li><p>迭代器类似指针</p></li><li><p><code>std :: advance(mid, k / 2);</code> <strong>-&gt;</strong> 使迭代器it偏移n，其中n为整数（这里就是使<code>mid</code>偏移k / 2）</p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">advance</span> <span class="token punctuation">(</span>InputIterator<span class="token operator">&amp;</span> it<span class="token punctuation">,</span> Distance n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>求中位数的话可以用通用的表达式 (A[mid] + A[mid - (1 - k % 2)]) / 2来求中位数</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后还是没有靠自己把这个hard难度的题给做出来，但我在做这个题的时候又学到了这么多的新知识，收获满满</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 做题经验get </category>
          
          <category> 实战的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的KeyListener设定按键后按下没有效果</title>
      <link href="/2021/01/29/java-zhong-de-keylistener-she-ding-an-jian-hou-an-xia-mei-you-xiao-guo/"/>
      <url>/2021/01/29/java-zhong-de-keylistener-she-ding-an-jian-hou-an-xia-mei-you-xiao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title="-"></a>-</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>最近写了一个程序，需要用到键盘监听和鼠标监听，鼠标监听到没有<strong>Bug</strong> ,但在写键盘监听的时候，在监听函数里添加了对键盘值的监听，但按下后却没有反应</li><li>代码如下，当按下空格的时候输出空格被按下</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>VK_SPACE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Systme<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>当我的空格按下时，却并没有输出<strong>Space</strong>，这就很奇怪了，因为我明明在想要的监听的界面添加了监听</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">paExperimentPanel<span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li>后来发现除了需要添加监听外，还需要让监听的界面获得焦点</li></ul><pre class="line-numbers language-java"><code class="language-java">paExperimentPanel<span class="token punctuation">.</span><span class="token function">requestFocusInWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让其获得焦点，这样才能是键盘监听能够正常使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>可能因为我创建的界面太多，所以需要指定对那个界面进行监听</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
          <category> 项目 </category>
          
          <category> 问题与解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找数组的中心索引</title>
      <link href="/2021/01/28/xun-zhao-shu-zu-de-zhong-xin-suo-yin/"/>
      <url>/2021/01/28/xun-zhao-shu-zu-de-zhong-xin-suo-yin/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>给定一个整数类型的数组 nums，请编写一个能够返回数组 “中心索引” 的方法。<br>我们是这样定义数组 中心索引 的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。</p><p><a href="https://leetcode-cn.com/problems/find-pivot-index/" target="_blank" rel="noopener">leetcode传送们</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>首先对这个数组所有的数进行求和，方便之后在遍历的时候对数组左半部分和右半部分进行比较</li><li>定义两个变量<code>LeftSum</code>和<code>RightSum</code>来分别记录左半部分的和右半部分的和</li><li>在遍历过程中不断更新<code>LeftSum</code>和<code>RightSum</code>并对它们进行比较</li><li><strong>注意：</strong> <code>LeftSum += nums[i]</code>，而<code>RightSum = Sum - LeftSum + nums[i]</code>，如果加上<code>i</code>当前位置的值后，左半部分和右边部分的值是相等的，说明减去<code>i</code>当前位置的值，那么左半部分和右半部分也是相等的，那么<code>i</code>位置就是该数组的中心索引</li></ul><h3 id="MyCode"><a href="#MyCode" class="headerlink" title="MyCode"></a>MyCode</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录整个数组的和</span>        <span class="token comment" spellcheck="true">//对数组进行遍历，保存整个数组的和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>            Sum <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录左半部分和右半部分的和</span>        <span class="token keyword">int</span> LeftSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> RightSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对数组进行遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拓展左半部分的和</span>            LeftSum <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//记录相应的右半部分的和</span>            RightSum <span class="token operator">=</span> Sum <span class="token operator">-</span> LeftSum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果左半部分和右半部分的相等，那么当前值就是中心索引</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LeftSum <span class="token operator">==</span> RightSum<span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则就返回-1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 做题经验get </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缀点成线</title>
      <link href="/2021/01/28/zhui-dian-cheng-xian/"/>
      <url>/2021/01/28/zhui-dian-cheng-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>在一个 XY 坐标系中有一些点，我们用数组 coordinates 来分别记录它们的坐标，其中 coordinates[i] = [x, y] 表示横坐标为 x、纵坐标为 y 的点。<br>请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 true，否则请返回 false。</p><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-straight-line/" target="_blank" rel="noopener">leetcode原题传送门</a></p><h3 id="解题想法"><a href="#解题想法" class="headerlink" title="解题想法"></a>解题想法</h3><ul><li>看到题目第一眼，就是想到使用斜率来比较，只要两点的斜率和之前的一样，那么说明它们就在一条直线上</li></ul><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><ul><li>从第3个点开始求，因为每次比较的是当前点和第一个点的斜率与第一个点和后一个点的斜率是否一样</li></ul><h3 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h3><ul><li>最开始使用的就是除法来求斜率，这就导致了精度缺失，直接拿来比较的话会出现误差，导致结果错误</li><li>所以推荐使用乘法，这样没有精度丢失，可以保证结果正确</li></ul><h3 id="MyCode"><a href="#MyCode" class="headerlink" title="MyCode"></a>MyCode</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">checkStraightLine</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> coordinates<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>coordinates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果只有一个点的话，说明一定是在一条直线上</span>        <span class="token comment" spellcheck="true">//求出直线的斜率</span>        <span class="token comment" spellcheck="true">//double k = coordinates[1][1] - coordinates[0][1] / coordinates[1][0] - coordinates[0][0];</span>        <span class="token comment" spellcheck="true">//按列数遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coordinates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前点和第一个点的斜率与第一个点所构成的斜率和初始的k不一样，返回false</span>            <span class="token comment" spellcheck="true">//double tempK = (coordinates[i][1] - coordinates[0][1]) / (coordinates[i][0] - coordinates[0][0]); </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>coordinates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>coordinates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token operator">!=</span><span class="token punctuation">(</span>coordinates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>coordinates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> coordinates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>能用乘法还是用乘法，不能用乘法想办法用乘法 :smile:</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 做题经验get </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长连续递增序列</title>
      <link href="/2021/01/24/zui-chang-lian-xu-di-zeng-xu-lie/"/>
      <url>/2021/01/24/zui-chang-lian-xu-di-zeng-xu-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。</p><p>连续递增的子序列 可以由两个下标 l 和 r（l &lt; r）确定，如果对于每个 l &lt;= i &lt; r，都有 nums[i] &lt; nums[i + 1] ，那么子序列 [nums[l], nums[l + 1], …, nums[r - 1], nums[r]] 就是连续递增子序列。</p><p><a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence" target="_blank" rel="noopener">leetcode传送门</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>定义一个数组<code>dp[]</code>来记录<code>nums[]</code>数组中对应的那个数所能构成的递增序列</li><li>然后对<code>nums[]</code>数组进行遍历，如果 <strong>当前数的下标比 0大，而且比它的值前一个数大</strong>，那么它的<code>dp[i] = dp[i] + dp[i - 1]</code>（可以参考下图），否则就保持不变，直到把<code>nums[]</code>遍历完</li><li>然后找出在<code>dp[]</code>数组中最大的那个数，返回这个数就可以了</li></ul><h3 id="如果图片加载不出可以跳转到了leetcode"><a href="#如果图片加载不出可以跳转到了leetcode" class="headerlink" title="如果图片加载不出可以跳转到了leetcode"></a>如果图片加载不出可以跳转到了leetcode</h3><p><a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/solution/yi-ci-bian-li-shi-jian-96kong-jian-92-by-p9h1/" target="_blank" rel="noopener">leetcode题解链接</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic.leetcode-cn.com/1611480876-jcMvwC-image.png" alt="image.png"></p><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic.leetcode-cn.com/1611479928-hqfRfJ-image.png" alt="image.png"></p><h3 id="MyCode"><a href="#MyCode" class="headerlink" title="MyCode"></a>MyCode</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果原数组为0，则直接返回0</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录最长的连续递增序列</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个数组，数组长度为nums,size()，数全为1</span>        <span class="token comment" spellcheck="true">//开始对数组进行遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前数的比前一个数大，那么这个数对应的dp数组中的数就加上前一个数的dp数组中的数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找出数组中的最大的那个数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回最终结果</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 做题经验get </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替换空格</title>
      <link href="/2020/11/21/ti-huan-kong-ge/"/>
      <url>/2020/11/21/ti-huan-kong-ge/</url>
      
        <content type="html"><![CDATA[<h3 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。<br><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/" target="_blank" rel="noopener">leetcode传送门</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li>如果想把这道题目做到极致，就不要只用额外的辅助空间了</li><li>首先扩充数组到每个空格替换成”%20”之后的大小，可以使用<code>s.resize(num)</code>这个来改变原字符串的长度，<code>num</code>就是你要改变的数组的长度</li><li>然后从后向前替换空格，也就是双指针法</li><li>i指向新长度的末尾，j指向旧长度的末尾</li></ul><h3 id="为什么不从前向后遍历"><a href="#为什么不从前向后遍历" class="headerlink" title="为什么不从前向后遍历"></a>为什么不从前向后遍历</h3><h4 id="这么做有两个好处："><a href="#这么做有两个好处：" class="headerlink" title="这么做有两个好处："></a>这么做有两个好处：</h4><ul><li>不用申请新数组</li><li>从后向前填充元素，避免了从前先后填充元素要来的每次添加元素都要将添加元素之后的所有元素向后移动</li></ul><h3 id="My-Code"><a href="#My-Code" class="headerlink" title="My Code"></a>My Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最初这个字符串的长度</span>        <span class="token keyword">int</span> sLen<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历这个字符串，获得这个字符串的中空格的个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>count<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按获得的空格数，重新定义s字符串的长度</span>        s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>sLen<span class="token operator">+</span>count<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加之后的这个字符串的长度</span>        <span class="token keyword">int</span> sNewLen<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从后向前遍历(i表示新的字符串最后的那个位置，j表示之前那个字符串最后的位置)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> sNewLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> sLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">,</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果j位置处的字符不是一个空格，那么i位置就为这个字符</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">' '</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//否则就在i和i之前的位置出插入%20这个字符</span>                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//更新i的位置</span>                i<span class="token operator">=</span>i<span class="token number">-2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="做题小结"><a href="#做题小结" class="headerlink" title="做题小结"></a>做题小结</h3><p>现在开是准备做剑指offer的题坚持在这上面写自己没次的做题感受，记录自己的做题过程和遇题的想法</p><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 剑指offer </category>
          
          <category> 不走暴力路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome页面被百度劫持</title>
      <link href="/2020/11/19/chrome-bei-bai-du-jie-chi/"/>
      <url>/2020/11/19/chrome-bei-bai-du-jie-chi/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>在使用Chrome浏览器打开后直接弹出一个百度的界面</li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119223210578.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FfU01BS0VfQQ==,size_16,color_FFFFFF,t_70#pic_center" alt="百度界面"></li><li>这看着就很烦啊，我就想能不能把这个改回来，但改设置里的东西明显没有什么用，试了好多方法还是没什么用</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li><p>首先找到这个路径，把chrome随便改个名字就行</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119223442843.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FfU01BS0VfQQ==,size_16,color_FFFFFF,t_70#pic_center" alt="重命名"></p></li><li><p>然后问题就解决了</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119223609897.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FfU01BS0VfQQ==,size_16,color_FFFFFF,t_70#pic_center" alt="解决后"></p></li><li><p>不得不说，这种劫持还是很恶心，还是要保持良好的上网习惯</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组的查找</title>
      <link href="/2020/11/19/er-wei-shu-zu-de-cha-zhao/"/>
      <url>/2020/11/19/er-wei-shu-zu-de-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>现有矩阵 matrix 如下：</p><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>给定 target = 5，返回 true。</p><p>给定 target = 20，返回 false。</p><p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/" target="_blank" rel="noopener">leetcode传送门</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ul><li>在做这个题的时候，如果你要暴力的话，直接对数组进行搜索，那样的你就没有利用完题目所给你的条件，这显然是不及格的做法</li><li>所以我们需要在对题目所给条件完全利用的情况下，去尽可能的减少时间和空间的使用</li><li>然后我就想使用一个深度优先搜索来去做这个题</li></ul><h3 id="My-Code"><a href="#My-Code" class="headerlink" title="My Code"></a>My Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果查找的数超过了边界,直接返回false</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token operator">==</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> cur<span class="token operator">==</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果能够找到当前的数，那么返回true</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果当前的数比目标值大，那么返回false，结束该点的向下查找</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果当前的数比目标值小，那么就向左和向下查</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;row&lt;&lt;endl;</span>            <span class="token comment" spellcheck="true">//这一步我觉得很不错</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token punctuation">,</span>target<span class="token punctuation">,</span>matrix<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">find</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;row&lt;&lt;endl;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>target<span class="token punctuation">,</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>是不是觉得很长，而且关键还是超时了，这也是个不合格的题解，<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201119142506668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FfU01BS0VfQQ==,size_16,color_FFFFFF,t_70#pic_center" alt="超时情况"></p></li><li><p>关键还是只是几个用例没有过，这就很难受了，无奈点开题解，果然大佬就在里面，看了他们的方法重新写了一下</p></li><li><p>Code</p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从左下角（右上角也行）开始搜索，因为这个两个地点刚好满足一边比该点小一边比该点大</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前点比目标值大，那么向上移动一行</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果小的话就向右移动一列</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//相等就返回true</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果查完整个路径都没有的话，返回false</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>是不是感觉比之前那个好太多了，这完全是暴打我的想法</li><li>其实这个思想就是利用了在左下角和右上角那个点的特殊性，再看一次这个数组的情况：<br>[<br>[1,   4,  7, 11, 15],<br>[2,   5,  8, 12, 19],<br>[3,   6,  9, 16, 22],<br>[10, 13, 14, 17, 24],<br>[18, 21, 23, 26, 30]<br>]<br>我们可以看到左下角和右上角的这两个点的相邻点是一个比它小，一个比它大，这就比我从左上角开始搜索又多了一个可以用的条件，让题目更简单</li></ul><h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><ul><li>不得不说，就是遇题的get的点不一样，写出的代码就是不也一样，一个简单到几行代码就能AC，另一个又多，而且还是在最后超时，所以这就是思路的问题，完美利用题中所给条件。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 剑指offer </category>
          
          <category> 做题经验get </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客主页</title>
      <link href="/2020/10/30/zhu-ye/"/>
      <url>/2020/10/30/zhu-ye/</url>
      
        <content type="html"><![CDATA[<h3 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h3><pre><code>记录自己在LeetCode做题过程中的心得和感受，以及对LeetCode解题的具体题解和思路，同时也把自己学习知识的总结和学习过程记录下来。</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求根到叶子节点的数字之和</title>
      <link href="/2020/10/29/qiu-gen-dao-xie-zi-jie-dian/"/>
      <url>/2020/10/29/qiu-gen-dao-xie-zi-jie-dian/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p><a href="https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/" target="_blank" rel="noopener">传送门</a></p><hr><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="思路来源"><a href="#思路来源" class="headerlink" title="思路来源"></a>思路来源</h4><ul><li>对一个树进行前序遍历的方法，可以递归也可以迭代，我这里是用递归的方式写的，习惯了。</li><li>那么这个题和前序遍历有什么关系？像[1,2,3]这样的树，最后和为25（12+13），我们注意这个结果的来源是1—&gt;2（12）,然后1—&gt;3（13）,这是不是和前序很像，但还是有区别，我们需要保留有右节点的当前节点，否则就会变成12+3，这样的结果。</li></ul><h4 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h4><ul><li>首先我们需要一个数来记录最后所有的和 <code>int ans</code>。</li><li>还需要一个数组来储存节点到叶子节点代表的所有数字 <code>vector&lt;int&gt; res</code>。</li><li>当然还有一个数来记录从节点到叶子节点的代表数字 <code>int temp</code>。</li><li>实现的过程和前序遍历一样，在递归的过程中判断当前的节点是否为叶子节点，如果是，那么将叶子节点的值加到<code>temp</code>中，并将<code>temp</code>的值存进<code>res</code>数组中，然后将叶子节点的值取出，更新<code>temp</code>。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">==</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把叶子节点的值加进temp里</span>            temp<span class="token operator">=</span>temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;temp&lt;&lt;endl;</span>            <span class="token comment" spellcheck="true">//将值传进res数组中</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将叶子节点的值取出</span>            temp<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果当前值不是叶子节点，将当前值加入temp，然后判断它的左节点是否为空，如果不为空，继续向左遍历，在遇到叶子节点后，如果当前节点没有右节点 if(root-&gt;right==nullptr) 就开始更新 temp 的值，因为这一条分支的值已经记录了，所以我们需要去找节点的来一条分支，如果我们遇到当前的节点还存在右节点的话，那么我们这个节点就先保留，去记录右节点分支的值。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//如果不是叶子节点，更新temp的值</span>        temp<span class="token operator">=</span>temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果它的左节点不为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//向左遍历</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果它的右节点有值的话，就先不取出这个节点的值，没有就取出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果没有左节点，有右节点的话，就向右遍历，在遇到叶子节点后，就开始向上退。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//向右遍历</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出右节点的值</span>            temp<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果这个节点是叶子节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">==</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把叶子节点的值加进temp里</span>            temp<span class="token operator">=</span>temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;temp&lt;&lt;endl;</span>            <span class="token comment" spellcheck="true">//将值传进res数组中</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将叶子节点的值取出</span>            temp<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果不是叶子节点，更新temp的值</span>        temp<span class="token operator">=</span>temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果它的左节点不为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//向左遍历</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果它的右节点有值的话，就先不取出这个节点的值，没有就取出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果它的左节点为空，而右节点不为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//向右遍历</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出右节点的值</span>            temp<span class="token operator">=</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">sumNumbers</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果节点为空，返回0</span>        <span class="token comment" spellcheck="true">//对这棵树进行前序遍历</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把节点到叶子节点代表的数的值相加</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回最终的答案</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回最后的和</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录节点到叶子节点的代表的数字</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时记录分支里的数字</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 深度优先遍历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长按输入</title>
      <link href="/2020/10/21/chang-an-shu-ru/"/>
      <url>/2020/10/21/chang-an-shu-ru/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>传送门：<a href="https://leetcode-cn.com/problems/long-pressed-name/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/long-pressed-name/</a></p><hr><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>使用双指针，对两个数组进行实时比较，一次循环就能AC，这里说说循环里面需要注意的细节，while循环里这个代码<code>if(typed[tem2]==name[tem1])</code>一定要在<code>if(tem2&gt;0 &amp;&amp; typed[tem2]==typed[tem2-1])</code>这个前面，不仅是因为<code>tem2&gt;0</code>，因为你也可以这样写</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>tem2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>typed<span class="token punctuation">[</span>tem2<span class="token punctuation">]</span><span class="token operator">==</span>typed<span class="token punctuation">[</span>tem2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> tem2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>typed<span class="token punctuation">[</span>tem2<span class="token punctuation">]</span><span class="token operator">==</span>name<span class="token punctuation">[</span>tem1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tem1<span class="token operator">++</span><span class="token punctuation">;</span>        tem2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但这样写就会导致一个问题，它会去先判断typed的当前字符是否和前一个相同，然后一直tem2++,因为我当时就这样写的，就发现它结束后的值不太正常，就是这个问题导致的。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201021183712711.jpeg#pic_center" alt="在这里插入图片描述"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isLongPressedName</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> string typed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tem1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//name的指针</span>        <span class="token keyword">int</span> tem2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//typed的指针</span>        <span class="token comment" spellcheck="true">//对两个数组进行比较</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>tem2<span class="token operator">&lt;</span>typed<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果两个字符相同，就同时向后移</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>typed<span class="token punctuation">[</span>tem2<span class="token punctuation">]</span><span class="token operator">==</span>name<span class="token punctuation">[</span>tem1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tem1<span class="token operator">++</span><span class="token punctuation">;</span>                tem2<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tem2<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> typed<span class="token punctuation">[</span>tem2<span class="token punctuation">]</span><span class="token operator">==</span>typed<span class="token punctuation">[</span>tem2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> tem2<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果name和typed不相同，看typed是否和之前一样，如果一样就移动它</span>            <span class="token comment" spellcheck="true">//否则就返回false</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//最后判断name里的字符是否判断完了</span>        <span class="token keyword">return</span> tem1<span class="token operator">==</span>name<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><h3 id="失败的栈处理"><a href="#失败的栈处理" class="headerlink" title="失败的栈处理"></a>失败的栈处理</h3><p>这个我本来想用栈做的，因为之前做过一个比较含退格字符的题目,传送门<a href="https://leetcode-cn.com/problems/backspace-string-compare/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/backspace-string-compare/</a>，我就想这个题应该和那个题也差不多（还是太年轻了）。这个题和那个题差别就在如果在typed的里去通过当前字符和前一个字符是否相同来删除的话，那么如果name本来就是存在重复的字符这个情况就不能处理，所以这是一个失败的栈处理。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp">    stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>typed<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>typed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>typed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>temp<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>typed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> Num<span class="token operator">=</span>name<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Num<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>name<span class="token punctuation">[</span>Num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 双指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重排链表</title>
      <link href="/2020/10/20/chong-pai-lian-biao/"/>
      <url>/2020/10/20/chong-pai-lian-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>传送门：<a href="https://leetcode-cn.com/problems/reorder-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reorder-list/</a></p><hr><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//利用快慢指针来查找链表的中间节点</span>    ListNode<span class="token operator">*</span> <span class="token function">MID</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//快指针比慢指针永远快一步</span>        ListNode<span class="token operator">*</span> fast<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> slow<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当快指针走到末尾时，慢指针则刚好走了一半</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fast<span class="token operator">=</span>fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            slow<span class="token operator">=</span>slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回慢指针</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对链表进行反转</span>    ListNode<span class="token operator">*</span> <span class="token function">REVERSE</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录前一个节点</span>        ListNode <span class="token operator">*</span>cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录当前节点</span>        ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录下一个节点</span>        cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        pre<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            next<span class="token operator">=</span>cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存cur的下一个节点</span>            cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//令当前节点指向前一个节点</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新pre的值</span>            cur<span class="token operator">=</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前节点向后移一位</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//pre此时已经到最后一个节点，也就是反转后的头节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">reorderList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> mid<span class="token operator">=</span><span class="token function">MID</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取中间节点</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;mid->val;</span>        <span class="token comment" spellcheck="true">//通过中间节点，分为右链表和左链表</span>        ListNode<span class="token operator">*</span> left<span class="token operator">=</span>head<span class="token punctuation">;</span>         ListNode<span class="token operator">*</span> right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        mid<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//断开链表，分为左右链表</span>        <span class="token comment" spellcheck="true">//对右边链表进行反转</span>        right<span class="token operator">=</span><span class="token function">REVERSE</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;right->next->val;</span>        <span class="token comment" spellcheck="true">//将左链表和反转后的右链表合并</span>        ListNode<span class="token operator">*</span> L_temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存left当前节点的下一个节点</span>        ListNode<span class="token operator">*</span> R_temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存right当前节点的下一个节点</span>        <span class="token comment" spellcheck="true">//将两个链表进行合并</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> right<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            L_temp<span class="token operator">=</span>left<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存下一个节点</span>            R_temp<span class="token operator">=</span>right<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存下一个节点</span>            <span class="token comment" spellcheck="true">//连个链表进行相连</span>            left<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>right<span class="token punctuation">;</span>             right<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>L_temp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新left和right节点的位置</span>            left<span class="token operator">=</span>L_temp<span class="token punctuation">;</span>            right<span class="token operator">=</span>R_temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h3><p>在做这个题的时候，一开始想使用双指针的思想，但很快就否定了，因为链表不能从后向前，这个就直接out。这个不行就找其他方法，看了几遍题，就想先去找到这个链表的中点，然后将右边的链表倒置，再重新连接起来，要是不会找链表的中点和对链表进行转置，可以去看这两个题链表的中间节点：<a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/middle-of-the-linked-list/</a>和反转链表<a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/</a>。</p><hr><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>在把代码写出来后，在提交的时候发现竟然会出现执行错误，但却不出现报错，这就难受了，这样的执行错误连改bug的机会都不给，这样多半是和逻辑没什么关系，看看是不是出现溢出或者什么错误操作，然后我就发现了关键的代码 <code>mid-&gt;next=nullptr;</code> 。要是不添加这个代码的话，就会导致左右链表没有断开，然后出现环的情况。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
